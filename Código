// project: IoT Weather Station, EAFIT University, Systems Engineering, 20171
// Adaptation done by: Edwin Montoya Munera - emontoya@eafit.edu.co and David Velasquez - dvelas25@eafit.edu.co
// github: https://github.com/iotweatherstation/iotws-testSaveSensors.git

// Description: This program test the connection to the server "iotweatherstation" in order to SAVE: idhome, temp, humid and timestamp (yyyy:mm:dd:hh:mm:ss)
// the connection is done throught Wifi network and HTTP Connection. It uses GET Method.

//Libraries
#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <ESP8266WiFiMulti.h>
#include <ESP8266HTTPClient.h>


// (INICIO) AQUI EL "METODO" PARA LOS DATOS

#include "DHT.h"

#define DHTPIN D5     // what digital pin we're connected to

// Uncomment whatever type you're using!
#define DHTTYPE DHT11   // DHT 11
//#define DHTTYPE DHT22   // DHT 22  (AM2302), AM2321
//#define DHTTYPE DHT21   // DHT 21 (AM2301)

// Connect pin 1 (on the left) of the sensor to +5V
// NOTE: If using a board with 3.3V logic like an Arduino Due connect pin 1
// to 3.3V instead of 5V!
// Connect pin 2 of the sensor to whatever your DHTPIN is
// Connect pin 4 (on the right) of the sensor to GROUND
// Connect a 10K resistor from pin 2 (data) to pin 1 (power) of the sensor

// Initialize DHT sensor.
// Note that older versions of this library took an optional third parameter to
// tweak the timings for faster processors.  This parameter is no longer needed
// as the current DHT reading algorithm adjusts itself to work on faster procs.
DHT dht(DHTPIN, DHTTYPE);

//void setup() {
//  Serial.begin(9600);
//  Serial.println("DHTxx test!");
//
//  dht.begin();
//}



//(FIN) "METODO" PARA LOS DATOS


ESP8266WiFiMulti WiFiMulti;

//Constants
const unsigned long SEND_Timer = 60000;  //Delay between SEND updates, 5000 milliseconds
const unsigned int SENTVARS = 4;  //Number of sensor vars sent to REST Web App, (idHome, Temp & Humid, TimeStamp)
const char* SSID = "TP-LINK"; //WiFi SSID, change nombre-wifi por la red propia
const char* PASSWORD = "labtel1234"; //WiFi Pass, coloque el password real
const char* HOST = "http://iotserver1.dis.eafit.edu.co";  //REST Web Host

String appName = "/weather";
String serviceSaveSensors = "/saveSensors";  //Name of the service SAVESENSORS
String serviceGetTime = "/getTime";  //Name of the service GETTIME
String propertyNames[] = {"idhome", "temp", "humid", "timestamp"}; //Vector Var names
String propertyValues[SENTVARS]; //Vector for Var values
unsigned long lastConnectionTime = 0; //Last time you connected to the server, in milliseconds


String webGetTime() {
  // variables:
  HTTPClient http;
  String url;
  int httpCode;
  String payload;

  // wait for WiFi connection
  if ((WiFiMulti.run() == WL_CONNECTED)) {
    url = appName;
    url += serviceGetTime;
    http.begin(HOST + url);
    Serial.print(HOST + url);
    httpCode = http.GET();
    if (httpCode > 0) {
      if (httpCode == HTTP_CODE_OK) {
        payload = http.getString();
        Serial.println(payload);
      }
    }
    http.end();
    return payload;
  }
}



void SEND(int SENTVARS, String sensorNames[], String values[]) {
  // wait for WiFi connection
  if ((WiFiMulti.run() == WL_CONNECTED)) {
    HTTPClient http;
    String url = appName;
    url += serviceSaveSensors;
    url += "?";
    for (int idx = 0; idx < SENTVARS; idx++)
    {
      url += propertyNames[idx];
      url += "=";
      url += values[idx];
      url += "&";
    }

    http.begin(HOST + url);
    Serial.print(HOST + url);

    int httpCode = http.GET();

    // httpCode will be negative on error
    if (httpCode > 0) {
      // HTTP header has been send and Server response header has been handled
      Serial.printf("[HTTP] GET... code: %d\n", httpCode);

      // file found at server
      if (httpCode == HTTP_CODE_OK) {
        String payload = http.getString();
        Serial.println(payload);
      }
    } else {
      Serial.printf("[HTTP] GET... failed, error: %s\n", http.errorToString(httpCode).c_str());
    }
    http.end();
  }


}


void setup() {
  pinMode(D4, OUTPUT);
  digitalWrite(D4, HIGH);
  Serial.begin(115200);

  for (uint8_t t = 4; t > 0; t--) {
    Serial.printf("[SETUP] WAIT %d...\n", t);
    Serial.flush();
    delay(1000);

  }

  WiFiMulti.addAP(SSID, PASSWORD);

}



//Aqui junte ambos loops, empezando por el de HD.. TAL COSA jeje
void loop() {

  // Reading temperature or humidity takes about 250 milliseconds!
  // Sensor readings may also be up to 2 seconds 'old' (its a very slow sensor)


  if (millis() - lastConnectionTime > SEND_Timer) {
    float h = dht.readHumidity();
    // Read temperature as Celsius (the default)
    float t = dht.readTemperature();

    // Check if any reads failed and exit early (to try again).
    if (isnan(h) || isnan(t)) {
      Serial.println("Failed to read from DHT sensor!");
      return;
    }


    if (t >= 26) {
      digitalWrite(D4, LOW);
      delay(2000);
      digitalWrite(D4, HIGH);
      delay(2000);
    }

    propertyValues[0] = "ggarciah"; // replace by real idHome (string type)
    propertyValues[1] = t;
    propertyValues[2] = h;
    propertyValues[3] = webGetTime(); // replace by webGetTime() (string type)

    SEND(SENTVARS, propertyNames, propertyValues);
    lastConnectionTime = millis();
  }
}
